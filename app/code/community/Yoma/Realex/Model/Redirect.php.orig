<?php

class Yoma_Realex_Model_Redirect extends Yoma_Realex_Model_Api_Payment{

    /**
     * Constant payment method code
     */
    const PAYMENT_METHOD_CODE = 'realexredirect';

    /**
     * Magento payment code.
     *
     * @var string $_code
     */
    protected $_code = self::PAYMENT_METHOD_CODE;

    protected $_formBlockType = 'realex/form_redirect';
    protected $_infoBlockType = 'realex/info_redirect';

    protected $_isGateway = true;
    protected $_canAuthorize = true;
    protected $_canCapture = true;
    protected $_canCapturePartial = false;
    protected $_canReviewPayment = true;
    protected $_canRefund = true;
    protected $_canRefundInvoicePartial = true;
    protected $_canUseInternal = false;
    protected $_canUseForMultishipping = false;
    protected $_isCcTypeRequired = true;
    protected $_canVoid                     = false;
    protected $_canOrder                    = false;
    protected $_canUseCheckout              = true;
    protected $_isInitializeNeeded          = false;
    protected $_canFetchTransactionInfo     = false;
    protected $_canCreateBillingAgreement   = false;
    protected $_canManageRecurringProfiles  = false;
    protected $_canCancelInvoice            = false;
    protected $_canSaveCc                   = false;

    protected $_canCallbackAccessSession    = false;


    protected function _getService()
    {
        return Mage::getModel('realex/service_redirect');
    }

    protected function _registerTransaction(){

        $this->_saveTransaction();

        $this->_getPayment()->setIsTransactionPending(true);

    }

<<<<<<< mine
    public function getOrderPlaceRedirectUrl()
    {
        if($this->_getHelper()->getConfigData('realexredirect', 'iframe')){
            return Mage::getUrl('realex/redirect/iframe', array('_forced_secure' => true,));
=======


    /*
        protected function _init(){

            //$this->_getResponse();

            $this->setTransactionType('capture');

            $transactionReference = $this->_getResponse()->getOrderId();
            $this->setTransactionReference($transactionReference);

            $transaction = Mage::getModel('realex/transaction')
                ->loadByServiceTransactionReference($this->getCode(), $transactionReference);
            $this->_setTransaction($transaction);

            //check transaction match

            $order = Mage::getModel('sales/order')->load($transaction->getOrderId());
            $this->_setOrder($order);

            //check we have one

            if ($order->getStatus() !== Mage_Sales_Model_Order::STATE_PAYMENT_REVIEW) {
                $comment = $order->addStatusHistoryComment($this->_getHelper()
                    ->__('Warning: A payment gateway callback occured for this order.'));
                $comment->save();

                return;
            }

            $payment = Mage::getModel('sales/order_payment')->load($transaction->getPaymentId());
            $payment->setOrder($order);
            $this->_setPayment($payment);
            if (!$payment->getId()) {
                throw new Exception($this->_getHelper()
                    ->__("Unable to load payment for Transaction '{$transactionReference}'"));
            }
            $this->setMethodInstance($payment->getMethodInstance());

            return $this;
>>>>>>> theirs
        }
<<<<<<< mine
        return Mage::getUrl('realex/redirect/form', array('_forced_secure' => true,));
=======
    */
    /*
        protected function _processResponse(){
>>>>>>> theirs

<<<<<<< mine
    }
=======
                $this->addPaymentInfo(array(
                    'Result' => $this->_getResponse()->getResult(),
                    'Message' => $this->_getResponse()->getMessage(),
                    'CVN Result' => $this->_getResponse()->getCvnResult(),
                    'AVS Address Result' => $this->_getResponse()->getAvsAddressResponse(),
                    'AVS Postcode Result' => $this->_getResponse()->getAvsPostcodeResponse(),
                    'ECI Result' => $this->_getResponse()->getEci(),
                ));



                $this->_getResponse()->processResult();

                return $this;

        }

    */
>>>>>>> theirs

    public function acceptPayment(Mage_Payment_Model_Info $payment)
    {
        if (method_exists(get_parent_class(), 'acceptPayment')) {
            parent::acceptPayment($payment);
        } else {
            if (is_null($this->_canReviewPayment) || !$this->_canReviewPayment) {
                Mage::throwException(Mage::helper('realex')
                    ->__('The payment review action is unavailable.'));
            }
        }

        if (true !== $payment->getData('payment_accept')) {
            Mage::throwException('Online payments cannot be accepted manually.');
        }

        $requiredState = 'payment_review';

        if ($payment->getOrder()->getStatus() !== $requiredState) {
            $comment = $payment->getOrder()->addStatusHistoryComment('An attempt was made to accept this payment.');
            $comment->save();

            throw new Exception('Only orders with status Payment Review can be accepted');
        }

        return true;
    }

    public function denyPayment(Mage_Payment_Model_Info $payment)
    {
        if (method_exists(get_parent_class(), 'denyPayment')) {
            parent::denyPayment($payment);
        } else {
            if (is_null($this->_canReviewPayment) || !$this->_canReviewPayment) {
                Mage::throwException(Mage::helper('realex')
                    ->__('The payment review action is unavailable.'));
            }
        }

        if (true !== $payment->getData('payment_deny')) {
            Mage::throwException('Online payments cannot be accepted manually.');
        }

        $requiredState = 'payment_review';

        if ($payment->getOrder()->getStatus() !== $requiredState) {
            $comment = $payment->getOrder()->addStatusHistoryComment('Warning: An attempt was made to deny this payment.');
            $comment->save();

            throw new Exception("Only orders with status '{$requiredState}' can be denied online.");
        }

        return true;
    }

    public function isAvailable($quote = null) {
        return Mage_Payment_Model_Method_Abstract::isAvailable($quote);
    }



    protected function _getHelper()
    {
        return Mage::helper('realex/redirect');
    }

}
